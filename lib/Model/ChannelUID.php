<?php
/**
 * ChannelUID
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * openHAB REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.15
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ChannelUID Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ChannelUID implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ChannelUID';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id_without_group' => 'string',
'in_group' => 'bool',
'thing_uid' => '\Swagger\Client\Model\ThingUID',
'group_id' => 'string',
'id' => 'string',
'binding_id' => 'string',
'as_string' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id_without_group' => null,
'in_group' => null,
'thing_uid' => null,
'group_id' => null,
'id' => null,
'binding_id' => null,
'as_string' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id_without_group' => 'idWithoutGroup',
'in_group' => 'inGroup',
'thing_uid' => 'thingUID',
'group_id' => 'groupId',
'id' => 'id',
'binding_id' => 'bindingId',
'as_string' => 'asString'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id_without_group' => 'setIdWithoutGroup',
'in_group' => 'setInGroup',
'thing_uid' => 'setThingUid',
'group_id' => 'setGroupId',
'id' => 'setId',
'binding_id' => 'setBindingId',
'as_string' => 'setAsString'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id_without_group' => 'getIdWithoutGroup',
'in_group' => 'getInGroup',
'thing_uid' => 'getThingUid',
'group_id' => 'getGroupId',
'id' => 'getId',
'binding_id' => 'getBindingId',
'as_string' => 'getAsString'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id_without_group'] = isset($data['id_without_group']) ? $data['id_without_group'] : null;
        $this->container['in_group'] = isset($data['in_group']) ? $data['in_group'] : false;
        $this->container['thing_uid'] = isset($data['thing_uid']) ? $data['thing_uid'] : null;
        $this->container['group_id'] = isset($data['group_id']) ? $data['group_id'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['binding_id'] = isset($data['binding_id']) ? $data['binding_id'] : null;
        $this->container['as_string'] = isset($data['as_string']) ? $data['as_string'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id_without_group
     *
     * @return string
     */
    public function getIdWithoutGroup()
    {
        return $this->container['id_without_group'];
    }

    /**
     * Sets id_without_group
     *
     * @param string $id_without_group id_without_group
     *
     * @return $this
     */
    public function setIdWithoutGroup($id_without_group)
    {
        $this->container['id_without_group'] = $id_without_group;

        return $this;
    }

    /**
     * Gets in_group
     *
     * @return bool
     */
    public function getInGroup()
    {
        return $this->container['in_group'];
    }

    /**
     * Sets in_group
     *
     * @param bool $in_group in_group
     *
     * @return $this
     */
    public function setInGroup($in_group)
    {
        $this->container['in_group'] = $in_group;

        return $this;
    }

    /**
     * Gets thing_uid
     *
     * @return \Swagger\Client\Model\ThingUID
     */
    public function getThingUid()
    {
        return $this->container['thing_uid'];
    }

    /**
     * Sets thing_uid
     *
     * @param \Swagger\Client\Model\ThingUID $thing_uid thing_uid
     *
     * @return $this
     */
    public function setThingUid($thing_uid)
    {
        $this->container['thing_uid'] = $thing_uid;

        return $this;
    }

    /**
     * Gets group_id
     *
     * @return string
     */
    public function getGroupId()
    {
        return $this->container['group_id'];
    }

    /**
     * Sets group_id
     *
     * @param string $group_id group_id
     *
     * @return $this
     */
    public function setGroupId($group_id)
    {
        $this->container['group_id'] = $group_id;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets binding_id
     *
     * @return string
     */
    public function getBindingId()
    {
        return $this->container['binding_id'];
    }

    /**
     * Sets binding_id
     *
     * @param string $binding_id binding_id
     *
     * @return $this
     */
    public function setBindingId($binding_id)
    {
        $this->container['binding_id'] = $binding_id;

        return $this;
    }

    /**
     * Gets as_string
     *
     * @return string
     */
    public function getAsString()
    {
        return $this->container['as_string'];
    }

    /**
     * Sets as_string
     *
     * @param string $as_string as_string
     *
     * @return $this
     */
    public function setAsString($as_string)
    {
        $this->container['as_string'] = $as_string;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
