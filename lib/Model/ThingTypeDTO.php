<?php
/**
 * ThingTypeDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * openHAB REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.15
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ThingTypeDTO Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ThingTypeDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ThingTypeDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'uid' => 'string',
'label' => 'string',
'description' => 'string',
'category' => 'string',
'listed' => 'bool',
'supported_bridge_type_ui_ds' => 'string[]',
'bridge' => 'bool',
'channels' => '\Swagger\Client\Model\ChannelDefinitionDTO[]',
'channel_groups' => '\Swagger\Client\Model\ChannelGroupDefinitionDTO[]',
'config_parameters' => '\Swagger\Client\Model\ConfigDescriptionParameterDTO[]',
'parameter_groups' => '\Swagger\Client\Model\ConfigDescriptionParameterGroupDTO[]',
'properties' => 'map[string,string]',
'extensible_channel_type_ids' => 'string[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'uid' => null,
'label' => null,
'description' => null,
'category' => null,
'listed' => null,
'supported_bridge_type_ui_ds' => null,
'bridge' => null,
'channels' => null,
'channel_groups' => null,
'config_parameters' => null,
'parameter_groups' => null,
'properties' => null,
'extensible_channel_type_ids' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'uid' => 'UID',
'label' => 'label',
'description' => 'description',
'category' => 'category',
'listed' => 'listed',
'supported_bridge_type_ui_ds' => 'supportedBridgeTypeUIDs',
'bridge' => 'bridge',
'channels' => 'channels',
'channel_groups' => 'channelGroups',
'config_parameters' => 'configParameters',
'parameter_groups' => 'parameterGroups',
'properties' => 'properties',
'extensible_channel_type_ids' => 'extensibleChannelTypeIds'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'uid' => 'setUid',
'label' => 'setLabel',
'description' => 'setDescription',
'category' => 'setCategory',
'listed' => 'setListed',
'supported_bridge_type_ui_ds' => 'setSupportedBridgeTypeUiDs',
'bridge' => 'setBridge',
'channels' => 'setChannels',
'channel_groups' => 'setChannelGroups',
'config_parameters' => 'setConfigParameters',
'parameter_groups' => 'setParameterGroups',
'properties' => 'setProperties',
'extensible_channel_type_ids' => 'setExtensibleChannelTypeIds'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'uid' => 'getUid',
'label' => 'getLabel',
'description' => 'getDescription',
'category' => 'getCategory',
'listed' => 'getListed',
'supported_bridge_type_ui_ds' => 'getSupportedBridgeTypeUiDs',
'bridge' => 'getBridge',
'channels' => 'getChannels',
'channel_groups' => 'getChannelGroups',
'config_parameters' => 'getConfigParameters',
'parameter_groups' => 'getParameterGroups',
'properties' => 'getProperties',
'extensible_channel_type_ids' => 'getExtensibleChannelTypeIds'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['uid'] = isset($data['uid']) ? $data['uid'] : null;
        $this->container['label'] = isset($data['label']) ? $data['label'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['listed'] = isset($data['listed']) ? $data['listed'] : false;
        $this->container['supported_bridge_type_ui_ds'] = isset($data['supported_bridge_type_ui_ds']) ? $data['supported_bridge_type_ui_ds'] : null;
        $this->container['bridge'] = isset($data['bridge']) ? $data['bridge'] : false;
        $this->container['channels'] = isset($data['channels']) ? $data['channels'] : null;
        $this->container['channel_groups'] = isset($data['channel_groups']) ? $data['channel_groups'] : null;
        $this->container['config_parameters'] = isset($data['config_parameters']) ? $data['config_parameters'] : null;
        $this->container['parameter_groups'] = isset($data['parameter_groups']) ? $data['parameter_groups'] : null;
        $this->container['properties'] = isset($data['properties']) ? $data['properties'] : null;
        $this->container['extensible_channel_type_ids'] = isset($data['extensible_channel_type_ids']) ? $data['extensible_channel_type_ids'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets uid
     *
     * @return string
     */
    public function getUid()
    {
        return $this->container['uid'];
    }

    /**
     * Sets uid
     *
     * @param string $uid uid
     *
     * @return $this
     */
    public function setUid($uid)
    {
        $this->container['uid'] = $uid;

        return $this;
    }

    /**
     * Gets label
     *
     * @return string
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string $label label
     *
     * @return $this
     */
    public function setLabel($label)
    {
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string $category category
     *
     * @return $this
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets listed
     *
     * @return bool
     */
    public function getListed()
    {
        return $this->container['listed'];
    }

    /**
     * Sets listed
     *
     * @param bool $listed listed
     *
     * @return $this
     */
    public function setListed($listed)
    {
        $this->container['listed'] = $listed;

        return $this;
    }

    /**
     * Gets supported_bridge_type_ui_ds
     *
     * @return string[]
     */
    public function getSupportedBridgeTypeUiDs()
    {
        return $this->container['supported_bridge_type_ui_ds'];
    }

    /**
     * Sets supported_bridge_type_ui_ds
     *
     * @param string[] $supported_bridge_type_ui_ds supported_bridge_type_ui_ds
     *
     * @return $this
     */
    public function setSupportedBridgeTypeUiDs($supported_bridge_type_ui_ds)
    {
        $this->container['supported_bridge_type_ui_ds'] = $supported_bridge_type_ui_ds;

        return $this;
    }

    /**
     * Gets bridge
     *
     * @return bool
     */
    public function getBridge()
    {
        return $this->container['bridge'];
    }

    /**
     * Sets bridge
     *
     * @param bool $bridge bridge
     *
     * @return $this
     */
    public function setBridge($bridge)
    {
        $this->container['bridge'] = $bridge;

        return $this;
    }

    /**
     * Gets channels
     *
     * @return \Swagger\Client\Model\ChannelDefinitionDTO[]
     */
    public function getChannels()
    {
        return $this->container['channels'];
    }

    /**
     * Sets channels
     *
     * @param \Swagger\Client\Model\ChannelDefinitionDTO[] $channels channels
     *
     * @return $this
     */
    public function setChannels($channels)
    {
        $this->container['channels'] = $channels;

        return $this;
    }

    /**
     * Gets channel_groups
     *
     * @return \Swagger\Client\Model\ChannelGroupDefinitionDTO[]
     */
    public function getChannelGroups()
    {
        return $this->container['channel_groups'];
    }

    /**
     * Sets channel_groups
     *
     * @param \Swagger\Client\Model\ChannelGroupDefinitionDTO[] $channel_groups channel_groups
     *
     * @return $this
     */
    public function setChannelGroups($channel_groups)
    {
        $this->container['channel_groups'] = $channel_groups;

        return $this;
    }

    /**
     * Gets config_parameters
     *
     * @return \Swagger\Client\Model\ConfigDescriptionParameterDTO[]
     */
    public function getConfigParameters()
    {
        return $this->container['config_parameters'];
    }

    /**
     * Sets config_parameters
     *
     * @param \Swagger\Client\Model\ConfigDescriptionParameterDTO[] $config_parameters config_parameters
     *
     * @return $this
     */
    public function setConfigParameters($config_parameters)
    {
        $this->container['config_parameters'] = $config_parameters;

        return $this;
    }

    /**
     * Gets parameter_groups
     *
     * @return \Swagger\Client\Model\ConfigDescriptionParameterGroupDTO[]
     */
    public function getParameterGroups()
    {
        return $this->container['parameter_groups'];
    }

    /**
     * Sets parameter_groups
     *
     * @param \Swagger\Client\Model\ConfigDescriptionParameterGroupDTO[] $parameter_groups parameter_groups
     *
     * @return $this
     */
    public function setParameterGroups($parameter_groups)
    {
        $this->container['parameter_groups'] = $parameter_groups;

        return $this;
    }

    /**
     * Gets properties
     *
     * @return map[string,string]
     */
    public function getProperties()
    {
        return $this->container['properties'];
    }

    /**
     * Sets properties
     *
     * @param map[string,string] $properties properties
     *
     * @return $this
     */
    public function setProperties($properties)
    {
        $this->container['properties'] = $properties;

        return $this;
    }

    /**
     * Gets extensible_channel_type_ids
     *
     * @return string[]
     */
    public function getExtensibleChannelTypeIds()
    {
        return $this->container['extensible_channel_type_ids'];
    }

    /**
     * Sets extensible_channel_type_ids
     *
     * @param string[] $extensible_channel_type_ids extensible_channel_type_ids
     *
     * @return $this
     */
    public function setExtensibleChannelTypeIds($extensible_channel_type_ids)
    {
        $this->container['extensible_channel_type_ids'] = $extensible_channel_type_ids;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
