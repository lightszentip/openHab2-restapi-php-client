<?php
/**
 * DiscoveryResultDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * openHAB REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.15
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * DiscoveryResultDTO Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DiscoveryResultDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DiscoveryResultDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'bridge_uid' => 'string',
'flag' => 'string',
'label' => 'string',
'properties' => 'map[string,object]',
'representation_property' => 'string',
'thing_uid' => 'string',
'thing_type_uid' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'bridge_uid' => null,
'flag' => null,
'label' => null,
'properties' => null,
'representation_property' => null,
'thing_uid' => null,
'thing_type_uid' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'bridge_uid' => 'bridgeUID',
'flag' => 'flag',
'label' => 'label',
'properties' => 'properties',
'representation_property' => 'representationProperty',
'thing_uid' => 'thingUID',
'thing_type_uid' => 'thingTypeUID'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'bridge_uid' => 'setBridgeUid',
'flag' => 'setFlag',
'label' => 'setLabel',
'properties' => 'setProperties',
'representation_property' => 'setRepresentationProperty',
'thing_uid' => 'setThingUid',
'thing_type_uid' => 'setThingTypeUid'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'bridge_uid' => 'getBridgeUid',
'flag' => 'getFlag',
'label' => 'getLabel',
'properties' => 'getProperties',
'representation_property' => 'getRepresentationProperty',
'thing_uid' => 'getThingUid',
'thing_type_uid' => 'getThingTypeUid'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const FLAG__NEW = 'NEW';
const FLAG_IGNORED = 'IGNORED';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFlagAllowableValues()
    {
        return [
            self::FLAG__NEW,
self::FLAG_IGNORED,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['bridge_uid'] = isset($data['bridge_uid']) ? $data['bridge_uid'] : null;
        $this->container['flag'] = isset($data['flag']) ? $data['flag'] : null;
        $this->container['label'] = isset($data['label']) ? $data['label'] : null;
        $this->container['properties'] = isset($data['properties']) ? $data['properties'] : null;
        $this->container['representation_property'] = isset($data['representation_property']) ? $data['representation_property'] : null;
        $this->container['thing_uid'] = isset($data['thing_uid']) ? $data['thing_uid'] : null;
        $this->container['thing_type_uid'] = isset($data['thing_type_uid']) ? $data['thing_type_uid'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getFlagAllowableValues();
        if (!is_null($this->container['flag']) && !in_array($this->container['flag'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'flag', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets bridge_uid
     *
     * @return string
     */
    public function getBridgeUid()
    {
        return $this->container['bridge_uid'];
    }

    /**
     * Sets bridge_uid
     *
     * @param string $bridge_uid bridge_uid
     *
     * @return $this
     */
    public function setBridgeUid($bridge_uid)
    {
        $this->container['bridge_uid'] = $bridge_uid;

        return $this;
    }

    /**
     * Gets flag
     *
     * @return string
     */
    public function getFlag()
    {
        return $this->container['flag'];
    }

    /**
     * Sets flag
     *
     * @param string $flag flag
     *
     * @return $this
     */
    public function setFlag($flag)
    {
        $allowedValues = $this->getFlagAllowableValues();
        if (!is_null($flag) && !in_array($flag, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'flag', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['flag'] = $flag;

        return $this;
    }

    /**
     * Gets label
     *
     * @return string
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string $label label
     *
     * @return $this
     */
    public function setLabel($label)
    {
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets properties
     *
     * @return map[string,object]
     */
    public function getProperties()
    {
        return $this->container['properties'];
    }

    /**
     * Sets properties
     *
     * @param map[string,object] $properties properties
     *
     * @return $this
     */
    public function setProperties($properties)
    {
        $this->container['properties'] = $properties;

        return $this;
    }

    /**
     * Gets representation_property
     *
     * @return string
     */
    public function getRepresentationProperty()
    {
        return $this->container['representation_property'];
    }

    /**
     * Sets representation_property
     *
     * @param string $representation_property representation_property
     *
     * @return $this
     */
    public function setRepresentationProperty($representation_property)
    {
        $this->container['representation_property'] = $representation_property;

        return $this;
    }

    /**
     * Gets thing_uid
     *
     * @return string
     */
    public function getThingUid()
    {
        return $this->container['thing_uid'];
    }

    /**
     * Sets thing_uid
     *
     * @param string $thing_uid thing_uid
     *
     * @return $this
     */
    public function setThingUid($thing_uid)
    {
        $this->container['thing_uid'] = $thing_uid;

        return $this;
    }

    /**
     * Gets thing_type_uid
     *
     * @return string
     */
    public function getThingTypeUid()
    {
        return $this->container['thing_type_uid'];
    }

    /**
     * Sets thing_type_uid
     *
     * @param string $thing_type_uid thing_type_uid
     *
     * @return $this
     */
    public function setThingTypeUid($thing_type_uid)
    {
        $this->container['thing_type_uid'] = $thing_type_uid;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
