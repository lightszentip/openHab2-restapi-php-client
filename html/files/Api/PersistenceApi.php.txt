<?php
/**
 * PersistenceApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * openHAB REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.15
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * PersistenceApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PersistenceApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation httpDeletePersistenceServiceItem
     *
     * Delete item data from a specific persistence service.
     *
     * @param  string $service_id Id of the persistence service. (required)
     * @param  string $itemname The item name. (required)
     * @param  string $starttime Start time of the data to return. [yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ] (required)
     * @param  string $endtime End time of the data to return. [yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ] (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string[]
     */
    public function httpDeletePersistenceServiceItem($service_id, $itemname, $starttime, $endtime)
    {
        list($response) = $this->httpDeletePersistenceServiceItemWithHttpInfo($service_id, $itemname, $starttime, $endtime);
        return $response;
    }

    /**
     * Operation httpDeletePersistenceServiceItemWithHttpInfo
     *
     * Delete item data from a specific persistence service.
     *
     * @param  string $service_id Id of the persistence service. (required)
     * @param  string $itemname The item name. (required)
     * @param  string $starttime Start time of the data to return. [yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ] (required)
     * @param  string $endtime End time of the data to return. [yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ] (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string[], HTTP status code, HTTP response headers (array of strings)
     */
    public function httpDeletePersistenceServiceItemWithHttpInfo($service_id, $itemname, $starttime, $endtime)
    {
        $returnType = 'string[]';
        $request = $this->httpDeletePersistenceServiceItemRequest($service_id, $itemname, $starttime, $endtime);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation httpDeletePersistenceServiceItemAsync
     *
     * Delete item data from a specific persistence service.
     *
     * @param  string $service_id Id of the persistence service. (required)
     * @param  string $itemname The item name. (required)
     * @param  string $starttime Start time of the data to return. [yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ] (required)
     * @param  string $endtime End time of the data to return. [yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ] (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function httpDeletePersistenceServiceItemAsync($service_id, $itemname, $starttime, $endtime)
    {
        return $this->httpDeletePersistenceServiceItemAsyncWithHttpInfo($service_id, $itemname, $starttime, $endtime)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation httpDeletePersistenceServiceItemAsyncWithHttpInfo
     *
     * Delete item data from a specific persistence service.
     *
     * @param  string $service_id Id of the persistence service. (required)
     * @param  string $itemname The item name. (required)
     * @param  string $starttime Start time of the data to return. [yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ] (required)
     * @param  string $endtime End time of the data to return. [yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ] (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function httpDeletePersistenceServiceItemAsyncWithHttpInfo($service_id, $itemname, $starttime, $endtime)
    {
        $returnType = 'string[]';
        $request = $this->httpDeletePersistenceServiceItemRequest($service_id, $itemname, $starttime, $endtime);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'httpDeletePersistenceServiceItem'
     *
     * @param  string $service_id Id of the persistence service. (required)
     * @param  string $itemname The item name. (required)
     * @param  string $starttime Start time of the data to return. [yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ] (required)
     * @param  string $endtime End time of the data to return. [yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ] (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function httpDeletePersistenceServiceItemRequest($service_id, $itemname, $starttime, $endtime)
    {
        // verify the required parameter 'service_id' is set
        if ($service_id === null || (is_array($service_id) && count($service_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $service_id when calling httpDeletePersistenceServiceItem'
            );
        }
        // verify the required parameter 'itemname' is set
        if ($itemname === null || (is_array($itemname) && count($itemname) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $itemname when calling httpDeletePersistenceServiceItem'
            );
        }
        // verify the required parameter 'starttime' is set
        if ($starttime === null || (is_array($starttime) && count($starttime) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $starttime when calling httpDeletePersistenceServiceItem'
            );
        }
        // verify the required parameter 'endtime' is set
        if ($endtime === null || (is_array($endtime) && count($endtime) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $endtime when calling httpDeletePersistenceServiceItem'
            );
        }

        $resourcePath = '/persistence/items/{itemname}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($service_id !== null) {
            $queryParams['serviceId'] = ObjectSerializer::toQueryValue($service_id);
        }
        // query params
        if ($starttime !== null) {
            $queryParams['starttime'] = ObjectSerializer::toQueryValue($starttime);
        }
        // query params
        if ($endtime !== null) {
            $queryParams['endtime'] = ObjectSerializer::toQueryValue($endtime);
        }

        // path params
        if ($itemname !== null) {
            $resourcePath = str_replace(
                '{' . 'itemname' . '}',
                ObjectSerializer::toPathValue($itemname),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation httpGetPersistenceItemData
     *
     * Gets item persistence data from the persistence service.
     *
     * @param  string $itemname The item name (required)
     * @param  string $service_id Id of the persistence service. If not provided the default service will be used (optional)
     * @param  string $starttime Start time of the data to return. Will default to 1 day before endtime. [yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ] (optional)
     * @param  string $endtime End time of the data to return. Will default to current time. [yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ] (optional)
     * @param  int $page Page number of data to return. This parameter will enable paging. (optional)
     * @param  int $pagelength The length of each page. (optional)
     * @param  bool $boundary Gets one value before and after the requested period. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ItemHistoryDTO
     */
    public function httpGetPersistenceItemData($itemname, $service_id = null, $starttime = null, $endtime = null, $page = null, $pagelength = null, $boundary = null)
    {
        list($response) = $this->httpGetPersistenceItemDataWithHttpInfo($itemname, $service_id, $starttime, $endtime, $page, $pagelength, $boundary);
        return $response;
    }

    /**
     * Operation httpGetPersistenceItemDataWithHttpInfo
     *
     * Gets item persistence data from the persistence service.
     *
     * @param  string $itemname The item name (required)
     * @param  string $service_id Id of the persistence service. If not provided the default service will be used (optional)
     * @param  string $starttime Start time of the data to return. Will default to 1 day before endtime. [yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ] (optional)
     * @param  string $endtime End time of the data to return. Will default to current time. [yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ] (optional)
     * @param  int $page Page number of data to return. This parameter will enable paging. (optional)
     * @param  int $pagelength The length of each page. (optional)
     * @param  bool $boundary Gets one value before and after the requested period. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ItemHistoryDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function httpGetPersistenceItemDataWithHttpInfo($itemname, $service_id = null, $starttime = null, $endtime = null, $page = null, $pagelength = null, $boundary = null)
    {
        $returnType = '\Swagger\Client\Model\ItemHistoryDTO';
        $request = $this->httpGetPersistenceItemDataRequest($itemname, $service_id, $starttime, $endtime, $page, $pagelength, $boundary);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ItemHistoryDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation httpGetPersistenceItemDataAsync
     *
     * Gets item persistence data from the persistence service.
     *
     * @param  string $itemname The item name (required)
     * @param  string $service_id Id of the persistence service. If not provided the default service will be used (optional)
     * @param  string $starttime Start time of the data to return. Will default to 1 day before endtime. [yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ] (optional)
     * @param  string $endtime End time of the data to return. Will default to current time. [yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ] (optional)
     * @param  int $page Page number of data to return. This parameter will enable paging. (optional)
     * @param  int $pagelength The length of each page. (optional)
     * @param  bool $boundary Gets one value before and after the requested period. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function httpGetPersistenceItemDataAsync($itemname, $service_id = null, $starttime = null, $endtime = null, $page = null, $pagelength = null, $boundary = null)
    {
        return $this->httpGetPersistenceItemDataAsyncWithHttpInfo($itemname, $service_id, $starttime, $endtime, $page, $pagelength, $boundary)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation httpGetPersistenceItemDataAsyncWithHttpInfo
     *
     * Gets item persistence data from the persistence service.
     *
     * @param  string $itemname The item name (required)
     * @param  string $service_id Id of the persistence service. If not provided the default service will be used (optional)
     * @param  string $starttime Start time of the data to return. Will default to 1 day before endtime. [yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ] (optional)
     * @param  string $endtime End time of the data to return. Will default to current time. [yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ] (optional)
     * @param  int $page Page number of data to return. This parameter will enable paging. (optional)
     * @param  int $pagelength The length of each page. (optional)
     * @param  bool $boundary Gets one value before and after the requested period. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function httpGetPersistenceItemDataAsyncWithHttpInfo($itemname, $service_id = null, $starttime = null, $endtime = null, $page = null, $pagelength = null, $boundary = null)
    {
        $returnType = '\Swagger\Client\Model\ItemHistoryDTO';
        $request = $this->httpGetPersistenceItemDataRequest($itemname, $service_id, $starttime, $endtime, $page, $pagelength, $boundary);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'httpGetPersistenceItemData'
     *
     * @param  string $itemname The item name (required)
     * @param  string $service_id Id of the persistence service. If not provided the default service will be used (optional)
     * @param  string $starttime Start time of the data to return. Will default to 1 day before endtime. [yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ] (optional)
     * @param  string $endtime End time of the data to return. Will default to current time. [yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ] (optional)
     * @param  int $page Page number of data to return. This parameter will enable paging. (optional)
     * @param  int $pagelength The length of each page. (optional)
     * @param  bool $boundary Gets one value before and after the requested period. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function httpGetPersistenceItemDataRequest($itemname, $service_id = null, $starttime = null, $endtime = null, $page = null, $pagelength = null, $boundary = null)
    {
        // verify the required parameter 'itemname' is set
        if ($itemname === null || (is_array($itemname) && count($itemname) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $itemname when calling httpGetPersistenceItemData'
            );
        }

        $resourcePath = '/persistence/items/{itemname}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($service_id !== null) {
            $queryParams['serviceId'] = ObjectSerializer::toQueryValue($service_id);
        }
        // query params
        if ($starttime !== null) {
            $queryParams['starttime'] = ObjectSerializer::toQueryValue($starttime);
        }
        // query params
        if ($endtime !== null) {
            $queryParams['endtime'] = ObjectSerializer::toQueryValue($endtime);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($pagelength !== null) {
            $queryParams['pagelength'] = ObjectSerializer::toQueryValue($pagelength);
        }
        // query params
        if ($boundary !== null) {
            $queryParams['boundary'] = ObjectSerializer::toQueryValue($boundary);
        }

        // path params
        if ($itemname !== null) {
            $resourcePath = str_replace(
                '{' . 'itemname' . '}',
                ObjectSerializer::toPathValue($itemname),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation httpGetPersistenceServiceItems
     *
     * Gets a list of items available via a specific persistence service.
     *
     * @param  string $service_id Id of the persistence service. If not provided the default service will be used (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string[]
     */
    public function httpGetPersistenceServiceItems($service_id = null)
    {
        list($response) = $this->httpGetPersistenceServiceItemsWithHttpInfo($service_id);
        return $response;
    }

    /**
     * Operation httpGetPersistenceServiceItemsWithHttpInfo
     *
     * Gets a list of items available via a specific persistence service.
     *
     * @param  string $service_id Id of the persistence service. If not provided the default service will be used (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string[], HTTP status code, HTTP response headers (array of strings)
     */
    public function httpGetPersistenceServiceItemsWithHttpInfo($service_id = null)
    {
        $returnType = 'string[]';
        $request = $this->httpGetPersistenceServiceItemsRequest($service_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation httpGetPersistenceServiceItemsAsync
     *
     * Gets a list of items available via a specific persistence service.
     *
     * @param  string $service_id Id of the persistence service. If not provided the default service will be used (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function httpGetPersistenceServiceItemsAsync($service_id = null)
    {
        return $this->httpGetPersistenceServiceItemsAsyncWithHttpInfo($service_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation httpGetPersistenceServiceItemsAsyncWithHttpInfo
     *
     * Gets a list of items available via a specific persistence service.
     *
     * @param  string $service_id Id of the persistence service. If not provided the default service will be used (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function httpGetPersistenceServiceItemsAsyncWithHttpInfo($service_id = null)
    {
        $returnType = 'string[]';
        $request = $this->httpGetPersistenceServiceItemsRequest($service_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'httpGetPersistenceServiceItems'
     *
     * @param  string $service_id Id of the persistence service. If not provided the default service will be used (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function httpGetPersistenceServiceItemsRequest($service_id = null)
    {

        $resourcePath = '/persistence/items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($service_id !== null) {
            $queryParams['serviceId'] = ObjectSerializer::toQueryValue($service_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation httpGetPersistenceServices
     *
     * Gets a list of persistence services.
     *
     * @param  string $accept_language Accept-Language (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string[]
     */
    public function httpGetPersistenceServices($accept_language = null)
    {
        list($response) = $this->httpGetPersistenceServicesWithHttpInfo($accept_language);
        return $response;
    }

    /**
     * Operation httpGetPersistenceServicesWithHttpInfo
     *
     * Gets a list of persistence services.
     *
     * @param  string $accept_language Accept-Language (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string[], HTTP status code, HTTP response headers (array of strings)
     */
    public function httpGetPersistenceServicesWithHttpInfo($accept_language = null)
    {
        $returnType = 'string[]';
        $request = $this->httpGetPersistenceServicesRequest($accept_language);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation httpGetPersistenceServicesAsync
     *
     * Gets a list of persistence services.
     *
     * @param  string $accept_language Accept-Language (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function httpGetPersistenceServicesAsync($accept_language = null)
    {
        return $this->httpGetPersistenceServicesAsyncWithHttpInfo($accept_language)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation httpGetPersistenceServicesAsyncWithHttpInfo
     *
     * Gets a list of persistence services.
     *
     * @param  string $accept_language Accept-Language (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function httpGetPersistenceServicesAsyncWithHttpInfo($accept_language = null)
    {
        $returnType = 'string[]';
        $request = $this->httpGetPersistenceServicesRequest($accept_language);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'httpGetPersistenceServices'
     *
     * @param  string $accept_language Accept-Language (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function httpGetPersistenceServicesRequest($accept_language = null)
    {

        $resourcePath = '/persistence';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = ObjectSerializer::toHeaderValue($accept_language);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation httpPutPersistenceItemData
     *
     * Stores item persistence data into the persistence service.
     *
     * @param  string $itemname The item name. (required)
     * @param  string $time Time of the data to be stored. Will default to current time. [yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ] (required)
     * @param  string $state The state to store. (required)
     * @param  string $service_id Id of the persistence service. If not provided the default service will be used (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ItemHistoryDTO
     */
    public function httpPutPersistenceItemData($itemname, $time, $state, $service_id = null)
    {
        list($response) = $this->httpPutPersistenceItemDataWithHttpInfo($itemname, $time, $state, $service_id);
        return $response;
    }

    /**
     * Operation httpPutPersistenceItemDataWithHttpInfo
     *
     * Stores item persistence data into the persistence service.
     *
     * @param  string $itemname The item name. (required)
     * @param  string $time Time of the data to be stored. Will default to current time. [yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ] (required)
     * @param  string $state The state to store. (required)
     * @param  string $service_id Id of the persistence service. If not provided the default service will be used (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ItemHistoryDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function httpPutPersistenceItemDataWithHttpInfo($itemname, $time, $state, $service_id = null)
    {
        $returnType = '\Swagger\Client\Model\ItemHistoryDTO';
        $request = $this->httpPutPersistenceItemDataRequest($itemname, $time, $state, $service_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ItemHistoryDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation httpPutPersistenceItemDataAsync
     *
     * Stores item persistence data into the persistence service.
     *
     * @param  string $itemname The item name. (required)
     * @param  string $time Time of the data to be stored. Will default to current time. [yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ] (required)
     * @param  string $state The state to store. (required)
     * @param  string $service_id Id of the persistence service. If not provided the default service will be used (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function httpPutPersistenceItemDataAsync($itemname, $time, $state, $service_id = null)
    {
        return $this->httpPutPersistenceItemDataAsyncWithHttpInfo($itemname, $time, $state, $service_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation httpPutPersistenceItemDataAsyncWithHttpInfo
     *
     * Stores item persistence data into the persistence service.
     *
     * @param  string $itemname The item name. (required)
     * @param  string $time Time of the data to be stored. Will default to current time. [yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ] (required)
     * @param  string $state The state to store. (required)
     * @param  string $service_id Id of the persistence service. If not provided the default service will be used (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function httpPutPersistenceItemDataAsyncWithHttpInfo($itemname, $time, $state, $service_id = null)
    {
        $returnType = '\Swagger\Client\Model\ItemHistoryDTO';
        $request = $this->httpPutPersistenceItemDataRequest($itemname, $time, $state, $service_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'httpPutPersistenceItemData'
     *
     * @param  string $itemname The item name. (required)
     * @param  string $time Time of the data to be stored. Will default to current time. [yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ] (required)
     * @param  string $state The state to store. (required)
     * @param  string $service_id Id of the persistence service. If not provided the default service will be used (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function httpPutPersistenceItemDataRequest($itemname, $time, $state, $service_id = null)
    {
        // verify the required parameter 'itemname' is set
        if ($itemname === null || (is_array($itemname) && count($itemname) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $itemname when calling httpPutPersistenceItemData'
            );
        }
        // verify the required parameter 'time' is set
        if ($time === null || (is_array($time) && count($time) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $time when calling httpPutPersistenceItemData'
            );
        }
        // verify the required parameter 'state' is set
        if ($state === null || (is_array($state) && count($state) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $state when calling httpPutPersistenceItemData'
            );
        }

        $resourcePath = '/persistence/items/{itemname}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($service_id !== null) {
            $queryParams['serviceId'] = ObjectSerializer::toQueryValue($service_id);
        }
        // query params
        if ($time !== null) {
            $queryParams['time'] = ObjectSerializer::toQueryValue($time);
        }
        // query params
        if ($state !== null) {
            $queryParams['state'] = ObjectSerializer::toQueryValue($state);
        }

        // path params
        if ($itemname !== null) {
            $resourcePath = str_replace(
                '{' . 'itemname' . '}',
                ObjectSerializer::toPathValue($itemname),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}

