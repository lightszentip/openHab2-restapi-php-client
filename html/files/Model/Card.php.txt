<?php
/**
 * Card
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * openHAB REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.15
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Card Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Card implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Card';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'config' => 'map[string,object]',
'slots' => 'map[string,\Swagger\Client\Model\Component[]]',
'uid' => 'string',
'title' => 'string',
'subtitle' => 'string',
'tags' => 'string[]',
'bookmarked' => 'bool',
'not_reuseable_in_chat' => 'bool',
'add_to_deck_denied' => 'bool',
'ephemeral' => 'bool',
'timestamp' => '\DateTime',
'object_attributes' => 'string[]',
'location_attributes' => 'string[]',
'name' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'config' => null,
'slots' => null,
'uid' => null,
'title' => null,
'subtitle' => null,
'tags' => null,
'bookmarked' => null,
'not_reuseable_in_chat' => null,
'add_to_deck_denied' => null,
'ephemeral' => null,
'timestamp' => 'date-time',
'object_attributes' => null,
'location_attributes' => null,
'name' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'config' => 'config',
'slots' => 'slots',
'uid' => 'uid',
'title' => 'title',
'subtitle' => 'subtitle',
'tags' => 'tags',
'bookmarked' => 'bookmarked',
'not_reuseable_in_chat' => 'notReuseableInChat',
'add_to_deck_denied' => 'addToDeckDenied',
'ephemeral' => 'ephemeral',
'timestamp' => 'timestamp',
'object_attributes' => 'objectAttributes',
'location_attributes' => 'locationAttributes',
'name' => 'name'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'config' => 'setConfig',
'slots' => 'setSlots',
'uid' => 'setUid',
'title' => 'setTitle',
'subtitle' => 'setSubtitle',
'tags' => 'setTags',
'bookmarked' => 'setBookmarked',
'not_reuseable_in_chat' => 'setNotReuseableInChat',
'add_to_deck_denied' => 'setAddToDeckDenied',
'ephemeral' => 'setEphemeral',
'timestamp' => 'setTimestamp',
'object_attributes' => 'setObjectAttributes',
'location_attributes' => 'setLocationAttributes',
'name' => 'setName'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'config' => 'getConfig',
'slots' => 'getSlots',
'uid' => 'getUid',
'title' => 'getTitle',
'subtitle' => 'getSubtitle',
'tags' => 'getTags',
'bookmarked' => 'getBookmarked',
'not_reuseable_in_chat' => 'getNotReuseableInChat',
'add_to_deck_denied' => 'getAddToDeckDenied',
'ephemeral' => 'getEphemeral',
'timestamp' => 'getTimestamp',
'object_attributes' => 'getObjectAttributes',
'location_attributes' => 'getLocationAttributes',
'name' => 'getName'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['config'] = isset($data['config']) ? $data['config'] : null;
        $this->container['slots'] = isset($data['slots']) ? $data['slots'] : null;
        $this->container['uid'] = isset($data['uid']) ? $data['uid'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['subtitle'] = isset($data['subtitle']) ? $data['subtitle'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['bookmarked'] = isset($data['bookmarked']) ? $data['bookmarked'] : false;
        $this->container['not_reuseable_in_chat'] = isset($data['not_reuseable_in_chat']) ? $data['not_reuseable_in_chat'] : false;
        $this->container['add_to_deck_denied'] = isset($data['add_to_deck_denied']) ? $data['add_to_deck_denied'] : false;
        $this->container['ephemeral'] = isset($data['ephemeral']) ? $data['ephemeral'] : false;
        $this->container['timestamp'] = isset($data['timestamp']) ? $data['timestamp'] : null;
        $this->container['object_attributes'] = isset($data['object_attributes']) ? $data['object_attributes'] : null;
        $this->container['location_attributes'] = isset($data['location_attributes']) ? $data['location_attributes'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets config
     *
     * @return map[string,object]
     */
    public function getConfig()
    {
        return $this->container['config'];
    }

    /**
     * Sets config
     *
     * @param map[string,object] $config config
     *
     * @return $this
     */
    public function setConfig($config)
    {
        $this->container['config'] = $config;

        return $this;
    }

    /**
     * Gets slots
     *
     * @return map[string,\Swagger\Client\Model\Component[]]
     */
    public function getSlots()
    {
        return $this->container['slots'];
    }

    /**
     * Sets slots
     *
     * @param map[string,\Swagger\Client\Model\Component[]] $slots slots
     *
     * @return $this
     */
    public function setSlots($slots)
    {
        $this->container['slots'] = $slots;

        return $this;
    }

    /**
     * Gets uid
     *
     * @return string
     */
    public function getUid()
    {
        return $this->container['uid'];
    }

    /**
     * Sets uid
     *
     * @param string $uid uid
     *
     * @return $this
     */
    public function setUid($uid)
    {
        $this->container['uid'] = $uid;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title title
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets subtitle
     *
     * @return string
     */
    public function getSubtitle()
    {
        return $this->container['subtitle'];
    }

    /**
     * Sets subtitle
     *
     * @param string $subtitle subtitle
     *
     * @return $this
     */
    public function setSubtitle($subtitle)
    {
        $this->container['subtitle'] = $subtitle;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[] $tags tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets bookmarked
     *
     * @return bool
     */
    public function getBookmarked()
    {
        return $this->container['bookmarked'];
    }

    /**
     * Sets bookmarked
     *
     * @param bool $bookmarked bookmarked
     *
     * @return $this
     */
    public function setBookmarked($bookmarked)
    {
        $this->container['bookmarked'] = $bookmarked;

        return $this;
    }

    /**
     * Gets not_reuseable_in_chat
     *
     * @return bool
     */
    public function getNotReuseableInChat()
    {
        return $this->container['not_reuseable_in_chat'];
    }

    /**
     * Sets not_reuseable_in_chat
     *
     * @param bool $not_reuseable_in_chat not_reuseable_in_chat
     *
     * @return $this
     */
    public function setNotReuseableInChat($not_reuseable_in_chat)
    {
        $this->container['not_reuseable_in_chat'] = $not_reuseable_in_chat;

        return $this;
    }

    /**
     * Gets add_to_deck_denied
     *
     * @return bool
     */
    public function getAddToDeckDenied()
    {
        return $this->container['add_to_deck_denied'];
    }

    /**
     * Sets add_to_deck_denied
     *
     * @param bool $add_to_deck_denied add_to_deck_denied
     *
     * @return $this
     */
    public function setAddToDeckDenied($add_to_deck_denied)
    {
        $this->container['add_to_deck_denied'] = $add_to_deck_denied;

        return $this;
    }

    /**
     * Gets ephemeral
     *
     * @return bool
     */
    public function getEphemeral()
    {
        return $this->container['ephemeral'];
    }

    /**
     * Sets ephemeral
     *
     * @param bool $ephemeral ephemeral
     *
     * @return $this
     */
    public function setEphemeral($ephemeral)
    {
        $this->container['ephemeral'] = $ephemeral;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return \DateTime
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param \DateTime $timestamp timestamp
     *
     * @return $this
     */
    public function setTimestamp($timestamp)
    {
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets object_attributes
     *
     * @return string[]
     */
    public function getObjectAttributes()
    {
        return $this->container['object_attributes'];
    }

    /**
     * Sets object_attributes
     *
     * @param string[] $object_attributes object_attributes
     *
     * @return $this
     */
    public function setObjectAttributes($object_attributes)
    {
        $this->container['object_attributes'] = $object_attributes;

        return $this;
    }

    /**
     * Gets location_attributes
     *
     * @return string[]
     */
    public function getLocationAttributes()
    {
        return $this->container['location_attributes'];
    }

    /**
     * Sets location_attributes
     *
     * @param string[] $location_attributes location_attributes
     *
     * @return $this
     */
    public function setLocationAttributes($location_attributes)
    {
        $this->container['location_attributes'] = $location_attributes;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

