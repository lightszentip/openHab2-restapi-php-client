<?php
/**
 * Channel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * openHAB REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.15
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Channel Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Channel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Channel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'accepted_item_type' => 'string',
'kind' => 'string',
'uid' => '\Swagger\Client\Model\ChannelUID',
'channel_type_uid' => '\Swagger\Client\Model\ChannelTypeUID',
'label' => 'string',
'description' => 'string',
'configuration' => '\Swagger\Client\Model\Configuration',
'properties' => 'map[string,string]',
'default_tags' => 'string[]',
'auto_update_policy' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'accepted_item_type' => null,
'kind' => null,
'uid' => null,
'channel_type_uid' => null,
'label' => null,
'description' => null,
'configuration' => null,
'properties' => null,
'default_tags' => null,
'auto_update_policy' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'accepted_item_type' => 'acceptedItemType',
'kind' => 'kind',
'uid' => 'uid',
'channel_type_uid' => 'channelTypeUID',
'label' => 'label',
'description' => 'description',
'configuration' => 'configuration',
'properties' => 'properties',
'default_tags' => 'defaultTags',
'auto_update_policy' => 'autoUpdatePolicy'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'accepted_item_type' => 'setAcceptedItemType',
'kind' => 'setKind',
'uid' => 'setUid',
'channel_type_uid' => 'setChannelTypeUid',
'label' => 'setLabel',
'description' => 'setDescription',
'configuration' => 'setConfiguration',
'properties' => 'setProperties',
'default_tags' => 'setDefaultTags',
'auto_update_policy' => 'setAutoUpdatePolicy'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'accepted_item_type' => 'getAcceptedItemType',
'kind' => 'getKind',
'uid' => 'getUid',
'channel_type_uid' => 'getChannelTypeUid',
'label' => 'getLabel',
'description' => 'getDescription',
'configuration' => 'getConfiguration',
'properties' => 'getProperties',
'default_tags' => 'getDefaultTags',
'auto_update_policy' => 'getAutoUpdatePolicy'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const KIND_STATE = 'STATE';
const KIND_TRIGGER = 'TRIGGER';
const AUTO_UPDATE_POLICY_VETO = 'VETO';
const AUTO_UPDATE_POLICY__DEFAULT = 'DEFAULT';
const AUTO_UPDATE_POLICY_RECOMMEND = 'RECOMMEND';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getKindAllowableValues()
    {
        return [
            self::KIND_STATE,
self::KIND_TRIGGER,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAutoUpdatePolicyAllowableValues()
    {
        return [
            self::AUTO_UPDATE_POLICY_VETO,
self::AUTO_UPDATE_POLICY__DEFAULT,
self::AUTO_UPDATE_POLICY_RECOMMEND,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['accepted_item_type'] = isset($data['accepted_item_type']) ? $data['accepted_item_type'] : null;
        $this->container['kind'] = isset($data['kind']) ? $data['kind'] : null;
        $this->container['uid'] = isset($data['uid']) ? $data['uid'] : null;
        $this->container['channel_type_uid'] = isset($data['channel_type_uid']) ? $data['channel_type_uid'] : null;
        $this->container['label'] = isset($data['label']) ? $data['label'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['configuration'] = isset($data['configuration']) ? $data['configuration'] : null;
        $this->container['properties'] = isset($data['properties']) ? $data['properties'] : null;
        $this->container['default_tags'] = isset($data['default_tags']) ? $data['default_tags'] : null;
        $this->container['auto_update_policy'] = isset($data['auto_update_policy']) ? $data['auto_update_policy'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getKindAllowableValues();
        if (!is_null($this->container['kind']) && !in_array($this->container['kind'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'kind', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAutoUpdatePolicyAllowableValues();
        if (!is_null($this->container['auto_update_policy']) && !in_array($this->container['auto_update_policy'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'auto_update_policy', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets accepted_item_type
     *
     * @return string
     */
    public function getAcceptedItemType()
    {
        return $this->container['accepted_item_type'];
    }

    /**
     * Sets accepted_item_type
     *
     * @param string $accepted_item_type accepted_item_type
     *
     * @return $this
     */
    public function setAcceptedItemType($accepted_item_type)
    {
        $this->container['accepted_item_type'] = $accepted_item_type;

        return $this;
    }

    /**
     * Gets kind
     *
     * @return string
     */
    public function getKind()
    {
        return $this->container['kind'];
    }

    /**
     * Sets kind
     *
     * @param string $kind kind
     *
     * @return $this
     */
    public function setKind($kind)
    {
        $allowedValues = $this->getKindAllowableValues();
        if (!is_null($kind) && !in_array($kind, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'kind', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['kind'] = $kind;

        return $this;
    }

    /**
     * Gets uid
     *
     * @return \Swagger\Client\Model\ChannelUID
     */
    public function getUid()
    {
        return $this->container['uid'];
    }

    /**
     * Sets uid
     *
     * @param \Swagger\Client\Model\ChannelUID $uid uid
     *
     * @return $this
     */
    public function setUid($uid)
    {
        $this->container['uid'] = $uid;

        return $this;
    }

    /**
     * Gets channel_type_uid
     *
     * @return \Swagger\Client\Model\ChannelTypeUID
     */
    public function getChannelTypeUid()
    {
        return $this->container['channel_type_uid'];
    }

    /**
     * Sets channel_type_uid
     *
     * @param \Swagger\Client\Model\ChannelTypeUID $channel_type_uid channel_type_uid
     *
     * @return $this
     */
    public function setChannelTypeUid($channel_type_uid)
    {
        $this->container['channel_type_uid'] = $channel_type_uid;

        return $this;
    }

    /**
     * Gets label
     *
     * @return string
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string $label label
     *
     * @return $this
     */
    public function setLabel($label)
    {
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets configuration
     *
     * @return \Swagger\Client\Model\Configuration
     */
    public function getConfiguration()
    {
        return $this->container['configuration'];
    }

    /**
     * Sets configuration
     *
     * @param \Swagger\Client\Model\Configuration $configuration configuration
     *
     * @return $this
     */
    public function setConfiguration($configuration)
    {
        $this->container['configuration'] = $configuration;

        return $this;
    }

    /**
     * Gets properties
     *
     * @return map[string,string]
     */
    public function getProperties()
    {
        return $this->container['properties'];
    }

    /**
     * Sets properties
     *
     * @param map[string,string] $properties properties
     *
     * @return $this
     */
    public function setProperties($properties)
    {
        $this->container['properties'] = $properties;

        return $this;
    }

    /**
     * Gets default_tags
     *
     * @return string[]
     */
    public function getDefaultTags()
    {
        return $this->container['default_tags'];
    }

    /**
     * Sets default_tags
     *
     * @param string[] $default_tags default_tags
     *
     * @return $this
     */
    public function setDefaultTags($default_tags)
    {
        $this->container['default_tags'] = $default_tags;

        return $this;
    }

    /**
     * Gets auto_update_policy
     *
     * @return string
     */
    public function getAutoUpdatePolicy()
    {
        return $this->container['auto_update_policy'];
    }

    /**
     * Sets auto_update_policy
     *
     * @param string $auto_update_policy auto_update_policy
     *
     * @return $this
     */
    public function setAutoUpdatePolicy($auto_update_policy)
    {
        $allowedValues = $this->getAutoUpdatePolicyAllowableValues();
        if (!is_null($auto_update_policy) && !in_array($auto_update_policy, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'auto_update_policy', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['auto_update_policy'] = $auto_update_policy;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

