<?php
/**
 * WidgetDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * openHAB REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.15
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * WidgetDTO Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WidgetDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'WidgetDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'widget_id' => 'string',
'type' => 'string',
'name' => 'string',
'label' => 'string',
'icon' => 'string',
'labelcolor' => 'string',
'valuecolor' => 'string',
'mappings' => '\Swagger\Client\Model\MappingDTO[]',
'switch_support' => 'bool',
'send_frequency' => 'int',
'separator' => 'string',
'refresh' => 'int',
'height' => 'int',
'min_value' => 'float',
'max_value' => 'float',
'step' => 'float',
'url' => 'string',
'encoding' => 'string',
'service' => 'string',
'period' => 'string',
'legend' => 'bool',
'state' => 'string',
'item' => '\Swagger\Client\Model\EnrichedItemDTO',
'linked_page' => '\Swagger\Client\Model\PageDTO',
'widgets' => '\Swagger\Client\Model\WidgetDTO[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'widget_id' => null,
'type' => null,
'name' => null,
'label' => null,
'icon' => null,
'labelcolor' => null,
'valuecolor' => null,
'mappings' => null,
'switch_support' => null,
'send_frequency' => 'int32',
'separator' => null,
'refresh' => 'int32',
'height' => 'int32',
'min_value' => null,
'max_value' => null,
'step' => null,
'url' => null,
'encoding' => null,
'service' => null,
'period' => null,
'legend' => null,
'state' => null,
'item' => null,
'linked_page' => null,
'widgets' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'widget_id' => 'widgetId',
'type' => 'type',
'name' => 'name',
'label' => 'label',
'icon' => 'icon',
'labelcolor' => 'labelcolor',
'valuecolor' => 'valuecolor',
'mappings' => 'mappings',
'switch_support' => 'switchSupport',
'send_frequency' => 'sendFrequency',
'separator' => 'separator',
'refresh' => 'refresh',
'height' => 'height',
'min_value' => 'minValue',
'max_value' => 'maxValue',
'step' => 'step',
'url' => 'url',
'encoding' => 'encoding',
'service' => 'service',
'period' => 'period',
'legend' => 'legend',
'state' => 'state',
'item' => 'item',
'linked_page' => 'linkedPage',
'widgets' => 'widgets'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'widget_id' => 'setWidgetId',
'type' => 'setType',
'name' => 'setName',
'label' => 'setLabel',
'icon' => 'setIcon',
'labelcolor' => 'setLabelcolor',
'valuecolor' => 'setValuecolor',
'mappings' => 'setMappings',
'switch_support' => 'setSwitchSupport',
'send_frequency' => 'setSendFrequency',
'separator' => 'setSeparator',
'refresh' => 'setRefresh',
'height' => 'setHeight',
'min_value' => 'setMinValue',
'max_value' => 'setMaxValue',
'step' => 'setStep',
'url' => 'setUrl',
'encoding' => 'setEncoding',
'service' => 'setService',
'period' => 'setPeriod',
'legend' => 'setLegend',
'state' => 'setState',
'item' => 'setItem',
'linked_page' => 'setLinkedPage',
'widgets' => 'setWidgets'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'widget_id' => 'getWidgetId',
'type' => 'getType',
'name' => 'getName',
'label' => 'getLabel',
'icon' => 'getIcon',
'labelcolor' => 'getLabelcolor',
'valuecolor' => 'getValuecolor',
'mappings' => 'getMappings',
'switch_support' => 'getSwitchSupport',
'send_frequency' => 'getSendFrequency',
'separator' => 'getSeparator',
'refresh' => 'getRefresh',
'height' => 'getHeight',
'min_value' => 'getMinValue',
'max_value' => 'getMaxValue',
'step' => 'getStep',
'url' => 'getUrl',
'encoding' => 'getEncoding',
'service' => 'getService',
'period' => 'getPeriod',
'legend' => 'getLegend',
'state' => 'getState',
'item' => 'getItem',
'linked_page' => 'getLinkedPage',
'widgets' => 'getWidgets'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['widget_id'] = isset($data['widget_id']) ? $data['widget_id'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['label'] = isset($data['label']) ? $data['label'] : null;
        $this->container['icon'] = isset($data['icon']) ? $data['icon'] : null;
        $this->container['labelcolor'] = isset($data['labelcolor']) ? $data['labelcolor'] : null;
        $this->container['valuecolor'] = isset($data['valuecolor']) ? $data['valuecolor'] : null;
        $this->container['mappings'] = isset($data['mappings']) ? $data['mappings'] : null;
        $this->container['switch_support'] = isset($data['switch_support']) ? $data['switch_support'] : false;
        $this->container['send_frequency'] = isset($data['send_frequency']) ? $data['send_frequency'] : null;
        $this->container['separator'] = isset($data['separator']) ? $data['separator'] : null;
        $this->container['refresh'] = isset($data['refresh']) ? $data['refresh'] : null;
        $this->container['height'] = isset($data['height']) ? $data['height'] : null;
        $this->container['min_value'] = isset($data['min_value']) ? $data['min_value'] : null;
        $this->container['max_value'] = isset($data['max_value']) ? $data['max_value'] : null;
        $this->container['step'] = isset($data['step']) ? $data['step'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['encoding'] = isset($data['encoding']) ? $data['encoding'] : null;
        $this->container['service'] = isset($data['service']) ? $data['service'] : null;
        $this->container['period'] = isset($data['period']) ? $data['period'] : null;
        $this->container['legend'] = isset($data['legend']) ? $data['legend'] : false;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['item'] = isset($data['item']) ? $data['item'] : null;
        $this->container['linked_page'] = isset($data['linked_page']) ? $data['linked_page'] : null;
        $this->container['widgets'] = isset($data['widgets']) ? $data['widgets'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets widget_id
     *
     * @return string
     */
    public function getWidgetId()
    {
        return $this->container['widget_id'];
    }

    /**
     * Sets widget_id
     *
     * @param string $widget_id widget_id
     *
     * @return $this
     */
    public function setWidgetId($widget_id)
    {
        $this->container['widget_id'] = $widget_id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets label
     *
     * @return string
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string $label label
     *
     * @return $this
     */
    public function setLabel($label)
    {
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets icon
     *
     * @return string
     */
    public function getIcon()
    {
        return $this->container['icon'];
    }

    /**
     * Sets icon
     *
     * @param string $icon icon
     *
     * @return $this
     */
    public function setIcon($icon)
    {
        $this->container['icon'] = $icon;

        return $this;
    }

    /**
     * Gets labelcolor
     *
     * @return string
     */
    public function getLabelcolor()
    {
        return $this->container['labelcolor'];
    }

    /**
     * Sets labelcolor
     *
     * @param string $labelcolor labelcolor
     *
     * @return $this
     */
    public function setLabelcolor($labelcolor)
    {
        $this->container['labelcolor'] = $labelcolor;

        return $this;
    }

    /**
     * Gets valuecolor
     *
     * @return string
     */
    public function getValuecolor()
    {
        return $this->container['valuecolor'];
    }

    /**
     * Sets valuecolor
     *
     * @param string $valuecolor valuecolor
     *
     * @return $this
     */
    public function setValuecolor($valuecolor)
    {
        $this->container['valuecolor'] = $valuecolor;

        return $this;
    }

    /**
     * Gets mappings
     *
     * @return \Swagger\Client\Model\MappingDTO[]
     */
    public function getMappings()
    {
        return $this->container['mappings'];
    }

    /**
     * Sets mappings
     *
     * @param \Swagger\Client\Model\MappingDTO[] $mappings mappings
     *
     * @return $this
     */
    public function setMappings($mappings)
    {
        $this->container['mappings'] = $mappings;

        return $this;
    }

    /**
     * Gets switch_support
     *
     * @return bool
     */
    public function getSwitchSupport()
    {
        return $this->container['switch_support'];
    }

    /**
     * Sets switch_support
     *
     * @param bool $switch_support switch_support
     *
     * @return $this
     */
    public function setSwitchSupport($switch_support)
    {
        $this->container['switch_support'] = $switch_support;

        return $this;
    }

    /**
     * Gets send_frequency
     *
     * @return int
     */
    public function getSendFrequency()
    {
        return $this->container['send_frequency'];
    }

    /**
     * Sets send_frequency
     *
     * @param int $send_frequency send_frequency
     *
     * @return $this
     */
    public function setSendFrequency($send_frequency)
    {
        $this->container['send_frequency'] = $send_frequency;

        return $this;
    }

    /**
     * Gets separator
     *
     * @return string
     */
    public function getSeparator()
    {
        return $this->container['separator'];
    }

    /**
     * Sets separator
     *
     * @param string $separator separator
     *
     * @return $this
     */
    public function setSeparator($separator)
    {
        $this->container['separator'] = $separator;

        return $this;
    }

    /**
     * Gets refresh
     *
     * @return int
     */
    public function getRefresh()
    {
        return $this->container['refresh'];
    }

    /**
     * Sets refresh
     *
     * @param int $refresh refresh
     *
     * @return $this
     */
    public function setRefresh($refresh)
    {
        $this->container['refresh'] = $refresh;

        return $this;
    }

    /**
     * Gets height
     *
     * @return int
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param int $height height
     *
     * @return $this
     */
    public function setHeight($height)
    {
        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets min_value
     *
     * @return float
     */
    public function getMinValue()
    {
        return $this->container['min_value'];
    }

    /**
     * Sets min_value
     *
     * @param float $min_value min_value
     *
     * @return $this
     */
    public function setMinValue($min_value)
    {
        $this->container['min_value'] = $min_value;

        return $this;
    }

    /**
     * Gets max_value
     *
     * @return float
     */
    public function getMaxValue()
    {
        return $this->container['max_value'];
    }

    /**
     * Sets max_value
     *
     * @param float $max_value max_value
     *
     * @return $this
     */
    public function setMaxValue($max_value)
    {
        $this->container['max_value'] = $max_value;

        return $this;
    }

    /**
     * Gets step
     *
     * @return float
     */
    public function getStep()
    {
        return $this->container['step'];
    }

    /**
     * Sets step
     *
     * @param float $step step
     *
     * @return $this
     */
    public function setStep($step)
    {
        $this->container['step'] = $step;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url url
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets encoding
     *
     * @return string
     */
    public function getEncoding()
    {
        return $this->container['encoding'];
    }

    /**
     * Sets encoding
     *
     * @param string $encoding encoding
     *
     * @return $this
     */
    public function setEncoding($encoding)
    {
        $this->container['encoding'] = $encoding;

        return $this;
    }

    /**
     * Gets service
     *
     * @return string
     */
    public function getService()
    {
        return $this->container['service'];
    }

    /**
     * Sets service
     *
     * @param string $service service
     *
     * @return $this
     */
    public function setService($service)
    {
        $this->container['service'] = $service;

        return $this;
    }

    /**
     * Gets period
     *
     * @return string
     */
    public function getPeriod()
    {
        return $this->container['period'];
    }

    /**
     * Sets period
     *
     * @param string $period period
     *
     * @return $this
     */
    public function setPeriod($period)
    {
        $this->container['period'] = $period;

        return $this;
    }

    /**
     * Gets legend
     *
     * @return bool
     */
    public function getLegend()
    {
        return $this->container['legend'];
    }

    /**
     * Sets legend
     *
     * @param bool $legend legend
     *
     * @return $this
     */
    public function setLegend($legend)
    {
        $this->container['legend'] = $legend;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state state
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets item
     *
     * @return \Swagger\Client\Model\EnrichedItemDTO
     */
    public function getItem()
    {
        return $this->container['item'];
    }

    /**
     * Sets item
     *
     * @param \Swagger\Client\Model\EnrichedItemDTO $item item
     *
     * @return $this
     */
    public function setItem($item)
    {
        $this->container['item'] = $item;

        return $this;
    }

    /**
     * Gets linked_page
     *
     * @return \Swagger\Client\Model\PageDTO
     */
    public function getLinkedPage()
    {
        return $this->container['linked_page'];
    }

    /**
     * Sets linked_page
     *
     * @param \Swagger\Client\Model\PageDTO $linked_page linked_page
     *
     * @return $this
     */
    public function setLinkedPage($linked_page)
    {
        $this->container['linked_page'] = $linked_page;

        return $this;
    }

    /**
     * Gets widgets
     *
     * @return \Swagger\Client\Model\WidgetDTO[]
     */
    public function getWidgets()
    {
        return $this->container['widgets'];
    }

    /**
     * Sets widgets
     *
     * @param \Swagger\Client\Model\WidgetDTO[] $widgets widgets
     *
     * @return $this
     */
    public function setWidgets($widgets)
    {
        $this->container['widgets'] = $widgets;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

