<?php
/**
 * ConfigDescriptionParameterDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * openHAB REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.15
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ConfigDescriptionParameterDTO Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ConfigDescriptionParameterDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ConfigDescriptionParameterDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'context' => 'string',
'default_value' => 'string',
'description' => 'string',
'label' => 'string',
'name' => 'string',
'required' => 'bool',
'type' => 'string',
'min' => 'float',
'max' => 'float',
'stepsize' => 'float',
'pattern' => 'string',
'read_only' => 'bool',
'multiple' => 'bool',
'multiple_limit' => 'int',
'group_name' => 'string',
'advanced' => 'bool',
'verify' => 'bool',
'limit_to_options' => 'bool',
'unit' => 'string',
'unit_label' => 'string',
'options' => '\Swagger\Client\Model\ParameterOptionDTO[]',
'filter_criteria' => '\Swagger\Client\Model\FilterCriteriaDTO[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'context' => null,
'default_value' => null,
'description' => null,
'label' => null,
'name' => null,
'required' => null,
'type' => null,
'min' => null,
'max' => null,
'stepsize' => null,
'pattern' => null,
'read_only' => null,
'multiple' => null,
'multiple_limit' => 'int32',
'group_name' => null,
'advanced' => null,
'verify' => null,
'limit_to_options' => null,
'unit' => null,
'unit_label' => null,
'options' => null,
'filter_criteria' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'context' => 'context',
'default_value' => 'defaultValue',
'description' => 'description',
'label' => 'label',
'name' => 'name',
'required' => 'required',
'type' => 'type',
'min' => 'min',
'max' => 'max',
'stepsize' => 'stepsize',
'pattern' => 'pattern',
'read_only' => 'readOnly',
'multiple' => 'multiple',
'multiple_limit' => 'multipleLimit',
'group_name' => 'groupName',
'advanced' => 'advanced',
'verify' => 'verify',
'limit_to_options' => 'limitToOptions',
'unit' => 'unit',
'unit_label' => 'unitLabel',
'options' => 'options',
'filter_criteria' => 'filterCriteria'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'context' => 'setContext',
'default_value' => 'setDefaultValue',
'description' => 'setDescription',
'label' => 'setLabel',
'name' => 'setName',
'required' => 'setRequired',
'type' => 'setType',
'min' => 'setMin',
'max' => 'setMax',
'stepsize' => 'setStepsize',
'pattern' => 'setPattern',
'read_only' => 'setReadOnly',
'multiple' => 'setMultiple',
'multiple_limit' => 'setMultipleLimit',
'group_name' => 'setGroupName',
'advanced' => 'setAdvanced',
'verify' => 'setVerify',
'limit_to_options' => 'setLimitToOptions',
'unit' => 'setUnit',
'unit_label' => 'setUnitLabel',
'options' => 'setOptions',
'filter_criteria' => 'setFilterCriteria'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'context' => 'getContext',
'default_value' => 'getDefaultValue',
'description' => 'getDescription',
'label' => 'getLabel',
'name' => 'getName',
'required' => 'getRequired',
'type' => 'getType',
'min' => 'getMin',
'max' => 'getMax',
'stepsize' => 'getStepsize',
'pattern' => 'getPattern',
'read_only' => 'getReadOnly',
'multiple' => 'getMultiple',
'multiple_limit' => 'getMultipleLimit',
'group_name' => 'getGroupName',
'advanced' => 'getAdvanced',
'verify' => 'getVerify',
'limit_to_options' => 'getLimitToOptions',
'unit' => 'getUnit',
'unit_label' => 'getUnitLabel',
'options' => 'getOptions',
'filter_criteria' => 'getFilterCriteria'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TYPE_TEXT = 'TEXT';
const TYPE_INTEGER = 'INTEGER';
const TYPE_DECIMAL = 'DECIMAL';
const TYPE_BOOLEAN = 'BOOLEAN';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_TEXT,
self::TYPE_INTEGER,
self::TYPE_DECIMAL,
self::TYPE_BOOLEAN,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['context'] = isset($data['context']) ? $data['context'] : null;
        $this->container['default_value'] = isset($data['default_value']) ? $data['default_value'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['label'] = isset($data['label']) ? $data['label'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['required'] = isset($data['required']) ? $data['required'] : false;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['min'] = isset($data['min']) ? $data['min'] : null;
        $this->container['max'] = isset($data['max']) ? $data['max'] : null;
        $this->container['stepsize'] = isset($data['stepsize']) ? $data['stepsize'] : null;
        $this->container['pattern'] = isset($data['pattern']) ? $data['pattern'] : null;
        $this->container['read_only'] = isset($data['read_only']) ? $data['read_only'] : false;
        $this->container['multiple'] = isset($data['multiple']) ? $data['multiple'] : false;
        $this->container['multiple_limit'] = isset($data['multiple_limit']) ? $data['multiple_limit'] : null;
        $this->container['group_name'] = isset($data['group_name']) ? $data['group_name'] : null;
        $this->container['advanced'] = isset($data['advanced']) ? $data['advanced'] : false;
        $this->container['verify'] = isset($data['verify']) ? $data['verify'] : false;
        $this->container['limit_to_options'] = isset($data['limit_to_options']) ? $data['limit_to_options'] : false;
        $this->container['unit'] = isset($data['unit']) ? $data['unit'] : null;
        $this->container['unit_label'] = isset($data['unit_label']) ? $data['unit_label'] : null;
        $this->container['options'] = isset($data['options']) ? $data['options'] : null;
        $this->container['filter_criteria'] = isset($data['filter_criteria']) ? $data['filter_criteria'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets context
     *
     * @return string
     */
    public function getContext()
    {
        return $this->container['context'];
    }

    /**
     * Sets context
     *
     * @param string $context context
     *
     * @return $this
     */
    public function setContext($context)
    {
        $this->container['context'] = $context;

        return $this;
    }

    /**
     * Gets default_value
     *
     * @return string
     */
    public function getDefaultValue()
    {
        return $this->container['default_value'];
    }

    /**
     * Sets default_value
     *
     * @param string $default_value default_value
     *
     * @return $this
     */
    public function setDefaultValue($default_value)
    {
        $this->container['default_value'] = $default_value;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets label
     *
     * @return string
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string $label label
     *
     * @return $this
     */
    public function setLabel($label)
    {
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets required
     *
     * @return bool
     */
    public function getRequired()
    {
        return $this->container['required'];
    }

    /**
     * Sets required
     *
     * @param bool $required required
     *
     * @return $this
     */
    public function setRequired($required)
    {
        $this->container['required'] = $required;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets min
     *
     * @return float
     */
    public function getMin()
    {
        return $this->container['min'];
    }

    /**
     * Sets min
     *
     * @param float $min min
     *
     * @return $this
     */
    public function setMin($min)
    {
        $this->container['min'] = $min;

        return $this;
    }

    /**
     * Gets max
     *
     * @return float
     */
    public function getMax()
    {
        return $this->container['max'];
    }

    /**
     * Sets max
     *
     * @param float $max max
     *
     * @return $this
     */
    public function setMax($max)
    {
        $this->container['max'] = $max;

        return $this;
    }

    /**
     * Gets stepsize
     *
     * @return float
     */
    public function getStepsize()
    {
        return $this->container['stepsize'];
    }

    /**
     * Sets stepsize
     *
     * @param float $stepsize stepsize
     *
     * @return $this
     */
    public function setStepsize($stepsize)
    {
        $this->container['stepsize'] = $stepsize;

        return $this;
    }

    /**
     * Gets pattern
     *
     * @return string
     */
    public function getPattern()
    {
        return $this->container['pattern'];
    }

    /**
     * Sets pattern
     *
     * @param string $pattern pattern
     *
     * @return $this
     */
    public function setPattern($pattern)
    {
        $this->container['pattern'] = $pattern;

        return $this;
    }

    /**
     * Gets read_only
     *
     * @return bool
     */
    public function getReadOnly()
    {
        return $this->container['read_only'];
    }

    /**
     * Sets read_only
     *
     * @param bool $read_only read_only
     *
     * @return $this
     */
    public function setReadOnly($read_only)
    {
        $this->container['read_only'] = $read_only;

        return $this;
    }

    /**
     * Gets multiple
     *
     * @return bool
     */
    public function getMultiple()
    {
        return $this->container['multiple'];
    }

    /**
     * Sets multiple
     *
     * @param bool $multiple multiple
     *
     * @return $this
     */
    public function setMultiple($multiple)
    {
        $this->container['multiple'] = $multiple;

        return $this;
    }

    /**
     * Gets multiple_limit
     *
     * @return int
     */
    public function getMultipleLimit()
    {
        return $this->container['multiple_limit'];
    }

    /**
     * Sets multiple_limit
     *
     * @param int $multiple_limit multiple_limit
     *
     * @return $this
     */
    public function setMultipleLimit($multiple_limit)
    {
        $this->container['multiple_limit'] = $multiple_limit;

        return $this;
    }

    /**
     * Gets group_name
     *
     * @return string
     */
    public function getGroupName()
    {
        return $this->container['group_name'];
    }

    /**
     * Sets group_name
     *
     * @param string $group_name group_name
     *
     * @return $this
     */
    public function setGroupName($group_name)
    {
        $this->container['group_name'] = $group_name;

        return $this;
    }

    /**
     * Gets advanced
     *
     * @return bool
     */
    public function getAdvanced()
    {
        return $this->container['advanced'];
    }

    /**
     * Sets advanced
     *
     * @param bool $advanced advanced
     *
     * @return $this
     */
    public function setAdvanced($advanced)
    {
        $this->container['advanced'] = $advanced;

        return $this;
    }

    /**
     * Gets verify
     *
     * @return bool
     */
    public function getVerify()
    {
        return $this->container['verify'];
    }

    /**
     * Sets verify
     *
     * @param bool $verify verify
     *
     * @return $this
     */
    public function setVerify($verify)
    {
        $this->container['verify'] = $verify;

        return $this;
    }

    /**
     * Gets limit_to_options
     *
     * @return bool
     */
    public function getLimitToOptions()
    {
        return $this->container['limit_to_options'];
    }

    /**
     * Sets limit_to_options
     *
     * @param bool $limit_to_options limit_to_options
     *
     * @return $this
     */
    public function setLimitToOptions($limit_to_options)
    {
        $this->container['limit_to_options'] = $limit_to_options;

        return $this;
    }

    /**
     * Gets unit
     *
     * @return string
     */
    public function getUnit()
    {
        return $this->container['unit'];
    }

    /**
     * Sets unit
     *
     * @param string $unit unit
     *
     * @return $this
     */
    public function setUnit($unit)
    {
        $this->container['unit'] = $unit;

        return $this;
    }

    /**
     * Gets unit_label
     *
     * @return string
     */
    public function getUnitLabel()
    {
        return $this->container['unit_label'];
    }

    /**
     * Sets unit_label
     *
     * @param string $unit_label unit_label
     *
     * @return $this
     */
    public function setUnitLabel($unit_label)
    {
        $this->container['unit_label'] = $unit_label;

        return $this;
    }

    /**
     * Gets options
     *
     * @return \Swagger\Client\Model\ParameterOptionDTO[]
     */
    public function getOptions()
    {
        return $this->container['options'];
    }

    /**
     * Sets options
     *
     * @param \Swagger\Client\Model\ParameterOptionDTO[] $options options
     *
     * @return $this
     */
    public function setOptions($options)
    {
        $this->container['options'] = $options;

        return $this;
    }

    /**
     * Gets filter_criteria
     *
     * @return \Swagger\Client\Model\FilterCriteriaDTO[]
     */
    public function getFilterCriteria()
    {
        return $this->container['filter_criteria'];
    }

    /**
     * Sets filter_criteria
     *
     * @param \Swagger\Client\Model\FilterCriteriaDTO[] $filter_criteria filter_criteria
     *
     * @return $this
     */
    public function setFilterCriteria($filter_criteria)
    {
        $this->container['filter_criteria'] = $filter_criteria;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

