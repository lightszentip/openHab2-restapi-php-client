<?php
/**
 * Thing
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * openHAB REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.15
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Thing Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Thing implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Thing';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'status_info' => '\Swagger\Client\Model\ThingStatusInfo',
'bridge_uid' => '\Swagger\Client\Model\ThingUID',
'handler' => '\Swagger\Client\Model\ThingHandler',
'location' => 'string',
'channels' => '\Swagger\Client\Model\Channel[]',
'label' => 'string',
'uid' => '\Swagger\Client\Model\ThingUID',
'thing_type_uid' => '\Swagger\Client\Model\ThingTypeUID',
'enabled' => 'bool',
'status' => 'string',
'configuration' => '\Swagger\Client\Model\Configuration',
'properties' => 'map[string,string]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'status_info' => null,
'bridge_uid' => null,
'handler' => null,
'location' => null,
'channels' => null,
'label' => null,
'uid' => null,
'thing_type_uid' => null,
'enabled' => null,
'status' => null,
'configuration' => null,
'properties' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'status_info' => 'statusInfo',
'bridge_uid' => 'bridgeUID',
'handler' => 'handler',
'location' => 'location',
'channels' => 'channels',
'label' => 'label',
'uid' => 'uid',
'thing_type_uid' => 'thingTypeUID',
'enabled' => 'enabled',
'status' => 'status',
'configuration' => 'configuration',
'properties' => 'properties'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'status_info' => 'setStatusInfo',
'bridge_uid' => 'setBridgeUid',
'handler' => 'setHandler',
'location' => 'setLocation',
'channels' => 'setChannels',
'label' => 'setLabel',
'uid' => 'setUid',
'thing_type_uid' => 'setThingTypeUid',
'enabled' => 'setEnabled',
'status' => 'setStatus',
'configuration' => 'setConfiguration',
'properties' => 'setProperties'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'status_info' => 'getStatusInfo',
'bridge_uid' => 'getBridgeUid',
'handler' => 'getHandler',
'location' => 'getLocation',
'channels' => 'getChannels',
'label' => 'getLabel',
'uid' => 'getUid',
'thing_type_uid' => 'getThingTypeUid',
'enabled' => 'getEnabled',
'status' => 'getStatus',
'configuration' => 'getConfiguration',
'properties' => 'getProperties'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATUS_UNINITIALIZED = 'UNINITIALIZED';
const STATUS_INITIALIZING = 'INITIALIZING';
const STATUS_UNKNOWN = 'UNKNOWN';
const STATUS_ONLINE = 'ONLINE';
const STATUS_OFFLINE = 'OFFLINE';
const STATUS_REMOVING = 'REMOVING';
const STATUS_REMOVED = 'REMOVED';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_UNINITIALIZED,
self::STATUS_INITIALIZING,
self::STATUS_UNKNOWN,
self::STATUS_ONLINE,
self::STATUS_OFFLINE,
self::STATUS_REMOVING,
self::STATUS_REMOVED,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['status_info'] = isset($data['status_info']) ? $data['status_info'] : null;
        $this->container['bridge_uid'] = isset($data['bridge_uid']) ? $data['bridge_uid'] : null;
        $this->container['handler'] = isset($data['handler']) ? $data['handler'] : null;
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
        $this->container['channels'] = isset($data['channels']) ? $data['channels'] : null;
        $this->container['label'] = isset($data['label']) ? $data['label'] : null;
        $this->container['uid'] = isset($data['uid']) ? $data['uid'] : null;
        $this->container['thing_type_uid'] = isset($data['thing_type_uid']) ? $data['thing_type_uid'] : null;
        $this->container['enabled'] = isset($data['enabled']) ? $data['enabled'] : false;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['configuration'] = isset($data['configuration']) ? $data['configuration'] : null;
        $this->container['properties'] = isset($data['properties']) ? $data['properties'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets status_info
     *
     * @return \Swagger\Client\Model\ThingStatusInfo
     */
    public function getStatusInfo()
    {
        return $this->container['status_info'];
    }

    /**
     * Sets status_info
     *
     * @param \Swagger\Client\Model\ThingStatusInfo $status_info status_info
     *
     * @return $this
     */
    public function setStatusInfo($status_info)
    {
        $this->container['status_info'] = $status_info;

        return $this;
    }

    /**
     * Gets bridge_uid
     *
     * @return \Swagger\Client\Model\ThingUID
     */
    public function getBridgeUid()
    {
        return $this->container['bridge_uid'];
    }

    /**
     * Sets bridge_uid
     *
     * @param \Swagger\Client\Model\ThingUID $bridge_uid bridge_uid
     *
     * @return $this
     */
    public function setBridgeUid($bridge_uid)
    {
        $this->container['bridge_uid'] = $bridge_uid;

        return $this;
    }

    /**
     * Gets handler
     *
     * @return \Swagger\Client\Model\ThingHandler
     */
    public function getHandler()
    {
        return $this->container['handler'];
    }

    /**
     * Sets handler
     *
     * @param \Swagger\Client\Model\ThingHandler $handler handler
     *
     * @return $this
     */
    public function setHandler($handler)
    {
        $this->container['handler'] = $handler;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string $location location
     *
     * @return $this
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets channels
     *
     * @return \Swagger\Client\Model\Channel[]
     */
    public function getChannels()
    {
        return $this->container['channels'];
    }

    /**
     * Sets channels
     *
     * @param \Swagger\Client\Model\Channel[] $channels channels
     *
     * @return $this
     */
    public function setChannels($channels)
    {
        $this->container['channels'] = $channels;

        return $this;
    }

    /**
     * Gets label
     *
     * @return string
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string $label label
     *
     * @return $this
     */
    public function setLabel($label)
    {
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets uid
     *
     * @return \Swagger\Client\Model\ThingUID
     */
    public function getUid()
    {
        return $this->container['uid'];
    }

    /**
     * Sets uid
     *
     * @param \Swagger\Client\Model\ThingUID $uid uid
     *
     * @return $this
     */
    public function setUid($uid)
    {
        $this->container['uid'] = $uid;

        return $this;
    }

    /**
     * Gets thing_type_uid
     *
     * @return \Swagger\Client\Model\ThingTypeUID
     */
    public function getThingTypeUid()
    {
        return $this->container['thing_type_uid'];
    }

    /**
     * Sets thing_type_uid
     *
     * @param \Swagger\Client\Model\ThingTypeUID $thing_type_uid thing_type_uid
     *
     * @return $this
     */
    public function setThingTypeUid($thing_type_uid)
    {
        $this->container['thing_type_uid'] = $thing_type_uid;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool $enabled enabled
     *
     * @return $this
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets configuration
     *
     * @return \Swagger\Client\Model\Configuration
     */
    public function getConfiguration()
    {
        return $this->container['configuration'];
    }

    /**
     * Sets configuration
     *
     * @param \Swagger\Client\Model\Configuration $configuration configuration
     *
     * @return $this
     */
    public function setConfiguration($configuration)
    {
        $this->container['configuration'] = $configuration;

        return $this;
    }

    /**
     * Gets properties
     *
     * @return map[string,string]
     */
    public function getProperties()
    {
        return $this->container['properties'];
    }

    /**
     * Sets properties
     *
     * @param map[string,string] $properties properties
     *
     * @return $this
     */
    public function setProperties($properties)
    {
        $this->container['properties'] = $properties;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

